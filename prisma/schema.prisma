// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())
    google_id String @unique
    location_id Int?
    userName String?
    email String? @unique
    password String?
    avatar String?
    bio String?
    level Int?
    meets Meet[]
    notifications Notification[]
    plants Plant[]
    posts Post[]
    // comments Comment[]
    attendees Attendee[]
}

model Image {
    id Int @id @default(autoincrement())
    url String
    category String
    posts Post[]
}

model Meet {
    id Int @id @default(autoincrement())
    time_date String
    location String
    eventName String
    description String
    imageUrl String
    userId Int
    owner User @relation(fields: [userId], references: [id])
    attendees Attendee[]
}

model Notification {
    id Int @id @default(autoincrement())
    userId Int
    message String
    recipient User @relation(fields: [userId], references: [id])
}

model Plant {
    id Int @id @default(autoincrement())
    userId Int
    plantAPIID Int?
    species String?
    commonName String?
    nickname String?
    location String?
    imageUrl String?
    description String?
    caregiver User @relation(fields: [userId], references: [id])
    tasks Task[]
}
model Task {
    id Int @id @default(autoincrement())
    taskName String?
    frequency String?
    lastCompleted DateTime
    nextComplection DateTime
    active Boolean
    plant_id Int
    taskPlant Plant @relation(fields: [plant_id], references: [id])
}

model Post {
    id Int @id @default(autoincrement())
    userId Int
    image_id Int?
    message String
    owner User @relation(fields: [userId], references: [id])
    image Image? @relation(fields: [image_id], references: [id])
    //comments Comment[]
}

model Comment {
    id Int @id @default(autoincrement())
    // userId Int
    // message String
    // post_id Int
    // commentor User @relation(fields: [userId], references: [id])
    // commentPost Post @relation(fields: [post_id], references: [id])
}

model Attendee {
    id Int @id @default(autoincrement())
    meet_id Int
    userId Int
    participant User @relation(fields: [userId], references: [id])
    meet Meet @relation(fields: [meet_id], references: [id])
}
